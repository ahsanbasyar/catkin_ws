// Generated by gencpp from file object_detector/States.msg
// DO NOT EDIT!


#ifndef OBJECT_DETECTOR_MESSAGE_STATES_H
#define OBJECT_DETECTOR_MESSAGE_STATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace object_detector
{
template <class ContainerAllocator>
struct States_
{
  typedef States_<ContainerAllocator> Type;

  States_()
    : Xc(0.0)
    , Yc(0.0)
    , W(0.0)
    , H(0.0)
    , Theta(0.0)  {
    }
  States_(const ContainerAllocator& _alloc)
    : Xc(0.0)
    , Yc(0.0)
    , W(0.0)
    , H(0.0)
    , Theta(0.0)  {
  (void)_alloc;
    }



   typedef float _Xc_type;
  _Xc_type Xc;

   typedef float _Yc_type;
  _Yc_type Yc;

   typedef float _W_type;
  _W_type W;

   typedef float _H_type;
  _H_type H;

   typedef float _Theta_type;
  _Theta_type Theta;





  typedef boost::shared_ptr< ::object_detector::States_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::object_detector::States_<ContainerAllocator> const> ConstPtr;

}; // struct States_

typedef ::object_detector::States_<std::allocator<void> > States;

typedef boost::shared_ptr< ::object_detector::States > StatesPtr;
typedef boost::shared_ptr< ::object_detector::States const> StatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::object_detector::States_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::object_detector::States_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::object_detector::States_<ContainerAllocator1> & lhs, const ::object_detector::States_<ContainerAllocator2> & rhs)
{
  return lhs.Xc == rhs.Xc &&
    lhs.Yc == rhs.Yc &&
    lhs.W == rhs.W &&
    lhs.H == rhs.H &&
    lhs.Theta == rhs.Theta;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::object_detector::States_<ContainerAllocator1> & lhs, const ::object_detector::States_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace object_detector

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::object_detector::States_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::object_detector::States_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detector::States_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::object_detector::States_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detector::States_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::object_detector::States_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::object_detector::States_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50a97e783d0bea6e7856b14f0401e6c9";
  }

  static const char* value(const ::object_detector::States_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50a97e783d0bea6eULL;
  static const uint64_t static_value2 = 0x7856b14f0401e6c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::object_detector::States_<ContainerAllocator> >
{
  static const char* value()
  {
    return "object_detector/States";
  }

  static const char* value(const ::object_detector::States_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::object_detector::States_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 Xc\n"
"float32 Yc\n"
"float32 W\n"
"float32 H\n"
"float32 Theta\n"
"\n"
;
  }

  static const char* value(const ::object_detector::States_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::object_detector::States_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.Xc);
      stream.next(m.Yc);
      stream.next(m.W);
      stream.next(m.H);
      stream.next(m.Theta);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct States_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::object_detector::States_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::object_detector::States_<ContainerAllocator>& v)
  {
    s << indent << "Xc: ";
    Printer<float>::stream(s, indent + "  ", v.Xc);
    s << indent << "Yc: ";
    Printer<float>::stream(s, indent + "  ", v.Yc);
    s << indent << "W: ";
    Printer<float>::stream(s, indent + "  ", v.W);
    s << indent << "H: ";
    Printer<float>::stream(s, indent + "  ", v.H);
    s << indent << "Theta: ";
    Printer<float>::stream(s, indent + "  ", v.Theta);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OBJECT_DETECTOR_MESSAGE_STATES_H
